value=\u4F60\u597D

# \u662F\u5426\u5141\u8BB8 websocket \u8BF7\u6C42\u53C2\u6570 curtime \u4E0E\u5F53\u524D\u65F6\u95F4\uFF08\u65F6\u95F4\u79D2\u6570\uFF09\u6709\u65F6\u95F4\u5DEE
websocket.allow-time-diff=false
# \u5141\u8BB8\u8BF7\u6C42\u53C2\u6570 curtime \u4E0E\u5F53\u524D\u65F6\u95F4\uFF08\u65F6\u95F4\u79D2\u6570\uFF09\u65F6\u95F4\u5DEE\u6700\u5927\u503C\uFF0C\u5355\u4F4D\u79D2
websocket.max-time-diff=900

#websocket port
server.port=9527
#server.http-port=9520
# \u6709\u4EE5\u4E0B\u914D\u7F6E\u5373\u4E3A\u5F00\u542F HTTPS\uFF0C\u6CA1\u6709\u5F00\u542F\u4EE5\u4E0B\u914D\u7F6E\u65F6\u4E0D\u8981\u505A port1(http) \u91CD\u5B9A\u5411\u5230 port2(https), \u8FD9\u6837\u4F1A\u5BFC\u81F4\u8BBE\u7F6E\u7684 redirectPort \u65E0\u6CD5\u8BBF\u95EE
#server.ssl.key-store=server.keystore
#server.ssl.key-store-password=eliteai
#server.ssl.key-store-type=JKS
# HTTPS and redirect
http.https.enable=false
http.port=80
http.redirect=false

# upload
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=50MB

# jasypt
# in production env, you can set password in ~/.profile like this:
# export JASYPT_PASSWORD = YOUR_PASSWORD
# and start application like this:
# java -jar -Djasypt.encryptor.password=${JASYPT_PASSWORD} xxx.jar
jasypt.encryptor.password=test
#jasypt \u4ECE\u4F4E\u7248\u672C\u5347\u7EA7\u5230\u5305\u7248\u672C\u65E0\u6CD5\u89E3\u5BC6\u53C2\u6570\u65F6\u9700\u8981\u4E0B\u9762\u7684\u914D\u7F6E
#jasypt.encryptor.algorithm=PBEWithMD5AndDES
#jasypt.encryptor.iv-generator-classname=org.jasypt.iv.NoIvGenerator


######## mybatis-plus dynamic datasource ########
#spring.datasource.dynamic.primary=mysql
#spring.datasource.dynamic.strict=true
# mysql
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.jdbc-url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
#spring.datasource.dynamic.datasource.mysql.driver-class-name=net.sf.log4jdbc.DriverSpy
#spring.datasource.dynamic.datasource.mysql.url=jdbc:log4jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
#spring.datasource.dynamic.datasource.mysql.username=test
#spring.datasource.dynamic.datasource.mysql.password=ENC(gSkiJOl8j6M/sv5PEacFTOT9Wo6yjtBRm+INrg5mEmgt/h+gR3P7B+CVFsXeXFqu)

# oracle
#spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
#spring.datasource.jdbc-url=jdbc:oracle:thin:@192.168.56.202:1521:orcl
#spring.datasource.dynamic.datasource.oracle.driver-class-name=net.sf.log4jdbc.DriverSpy
#spring.datasource.dynamic.datasource.oracle.url=jdbc:log4jdbc:oracle:thin:@192.168.56.202:1521:orcl
#spring.datasource.dynamic.datasource.oracle.username=test
#spring.datasource.dynamic.datasource.oracle.password=ENC(gSkiJOl8j6M/sv5PEacFTOT9Wo6yjtBRm+INrg5mEmgt/h+gR3P7B+CVFsXeXFqu)
######## mybatis-plus dynamic datasource ########


######## AbstractRoutingDataSource #######
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.mysql.driver-class-name=net.sf.log4jdbc.DriverSpy
spring.datasource.mysql.jdbc-url=jdbc:log4jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
spring.datasource.mysql.username=test
spring.datasource.mysql.password=ENC(gSkiJOl8j6M/sv5PEacFTOT9Wo6yjtBRm+INrg5mEmgt/h+gR3P7B+CVFsXeXFqu)

spring.datasource.oracle.driver-class-name=net.sf.log4jdbc.DriverSpy
spring.datasource.oracle.jdbc-url=jdbc:log4jdbc:oracle:thin:@192.168.56.202:1521:orcl
spring.datasource.oracle.username=test
spring.datasource.oracle.password=ENC(gSkiJOl8j6M/sv5PEacFTOT9Wo6yjtBRm+INrg5mEmgt/h+gR3P7B+CVFsXeXFqu)
######## AbstractRoutingDataSource #######


# \u5982\u679C\u8981\u4F7F\u7528 shardingjdbc \uFF0C\u8BF7\u6062\u590D pom.xml \u4E2D\u5BF9 sharding-jdbc-spring-boot-starter \u7684\u5F15\u5165\uFF0C\u4E14\u4EE5\u4E0B\u56DB\u4E2A\u5E93\u8981\u90FD\u5B58\u5728
# datasource
spring.shardingsphere.datasource.names=ds0master,ds1master,ds0slave,ds1slave
# datasource which table no need sharding
spring.shardingsphere.sharding.default-data-source-name=ds0master
# primary datasource
spring.shardingsphere.datasource.ds0master.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0master.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0master.jdbc-url=jdbc:mysql://127.0.0.1:3306/ds0master?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
spring.shardingsphere.datasource.ds0master.username=test
spring.shardingsphere.datasource.ds0master.password=ENC(gSkiJOl8j6M/sv5PEacFTOT9Wo6yjtBRm+INrg5mEmgt/h+gR3P7B+CVFsXeXFqu)
spring.shardingsphere.datasource.ds1master.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1master.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1master.jdbc-url=jdbc:mysql://127.0.0.1:3306/ds1master?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
spring.shardingsphere.datasource.ds1master.username=test
spring.shardingsphere.datasource.ds1master.password=ENC(gSkiJOl8j6M/sv5PEacFTOT9Wo6yjtBRm+INrg5mEmgt/h+gR3P7B+CVFsXeXFqu)
# slave datasource
spring.shardingsphere.datasource.ds0slave.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0slave.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0slave.jdbc-url=jdbc:mysql://127.0.0.1:3306/ds0slave?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
spring.shardingsphere.datasource.ds0slave.username=test
spring.shardingsphere.datasource.ds0slave.password=ENC(gSkiJOl8j6M/sv5PEacFTOT9Wo6yjtBRm+INrg5mEmgt/h+gR3P7B+CVFsXeXFqu)
spring.shardingsphere.datasource.ds1slave.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1slave.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1slave.jdbc-url=jdbc:mysql://127.0.0.1:3306/ds1slave?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
spring.shardingsphere.datasource.ds1slave.username=test
spring.shardingsphere.datasource.ds1slave.password=ENC(gSkiJOl8j6M/sv5PEacFTOT9Wo6yjtBRm+INrg5mEmgt/h+gR3P7B+CVFsXeXFqu)
# master-slave datasource detail
spring.shardingsphere.sharding.master-slave-rules.ds0master.master-data-source-name=ds0master
spring.shardingsphere.sharding.master-slave-rules.ds0master.slave-data-source-names=ds0slave
spring.shardingsphere.sharding.master-slave-rules.ds1master.master-data-source-name=ds1master
spring.shardingsphere.sharding.master-slave-rules.ds1master.slave-data-source-names=ds1slave
# database-sharding-strategy
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{id % 2}master
# table-sharding-strategy
spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds$->{0..1}master.user$->{0..1}
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=age
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user$->{age % 2}
spring.shardingsphere.sharding.tables.user.key-generator.column=id
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE

# mybatis-plus
mybatis-plus.enable=true
#mybatis-plus.mapper-locations=classpath:com/springboot/example/dao/**/*.xml
mybatis-plus.type-aliases-package=com.springboot.example.domain

# redis mode: sentinel\u3001cluster, \u6700\u591A\u53EA\u80FD\u5F00\u4E00\u4E2A
spring.redis.sentinel.enable=false
spring.redis.cluster.enable=false

# redis
spring.redis.host=127.0.0.1
spring.redis.port=6379
#spring.redis.password=ENC(HI9RxxvSqdyo+iqgHGk4UP97sEBgtv9p)
spring.redis.timeout=2000

# email
email.enable=false
spring.mail.host=smtp.163.com
spring.mail.username=zyh.546391777@163.com
spring.mail.password=ENC(vqLpc3WWTzJypUFJ0qTyU6jsN0hKZ6/qizu4mnmIikxFm/vEq5s3Bzh34lz8Bh3m)
spring.mail.default-encoding=UTF-8
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.from.addr=zyh.546391777@163.com

# \u9700\u8981\u4F7F\u7528\u54EA\u4E2A\u6D88\u606F\u4E2D\u95F4\u4EF6\uFF0C\u6539\u4E3A true \u5373\u53EF\uFF0C\u8BB0\u5F97\u8981\u5C06\u5BF9\u5E94\u6D88\u606F\u4E2D\u95F4\u4EF6\u7A0B\u5E8F\u542F\u52A8
activemq.enable=false
rocketmq.enable=false
kafka.enable=false

# activemq
activemq.broker-url=tcp://127.0.0.1:61616
activemq.username=admin
activemq.password=admin
# \u5728\u8003\u8651\u7ED3\u675F\u4E4B\u524D\u7B49\u5F85\u7684\u65F6\u95F4
activemq.close-timeout=15s
# \u9ED8\u8BA4\u4EE3\u7406 URL \u662F\u5426\u5E94\u8BE5\u5728\u5185\u5B58\u4E2D\u3002\u5982\u679C\u6307\u5B9A\u4E86\u663E\u5F0F\u4EE3\u7406\uFF0C\u5219\u5FFD\u7565\u6B64\u503C\u3002
activemq.in-memory=true
# \u662F\u5426\u5728\u56DE\u6EDA\u56DE\u6EDA\u6D88\u606F\u4E4B\u524D\u505C\u6B62\u6D88\u606F\u4F20\u9012\u3002\u8FD9\u610F\u5473\u7740\u5F53\u542F\u7528\u6B64\u547D\u4EE4\u65F6\uFF0C\u6D88\u606F\u987A\u5E8F\u4E0D\u4F1A\u88AB\u4FDD\u7559\u3002
activemq.non-blocking-redelivery=false
# \u7B49\u5F85\u6D88\u606F\u53D1\u9001\u54CD\u5E94\u7684\u65F6\u95F4\u3002\u8BBE\u7F6E\u4E3A 0 \u7B49\u5F85\u6C38\u8FDC\u3002
activemq.send-timeout=0
activemq.queue-name=QUEUE
activemq.topic-name=TOPIC

# rocketmq
rocketmq.consumer-group=GROUP_SIMPLE
rocketmq.name-srv-addr=localhost:9876

# kafka server\uFF0C\u591A\u4E2A server \u7528\u9017\u53F7\u9694\u5F00
spring.kafka.bootstrap-servers=127.0.0.1:9092
# \u91CD\u8BD5\u53D1\u9001\u6D88\u606F\u5931\u8D25\u7684\u6B21\u6570
spring.kafka.producer.retries=0
# \u6BCF\u5F53\u591A\u4E2A\u8BB0\u5F55\u88AB\u53D1\u9001\u5230\u540C\u4E00\u5206\u533A\u65F6\uFF0C\u751F\u4EA7\u8005\u5C06\u5C1D\u8BD5\u5C06\u8BB0\u5F55\u4E00\u8D77\u6279\u91CF\u5904\u7406\uFF0C\u9ED8\u8BA4\u503C\u4E3A 16384\uFF08\u4EE5\u5B57\u8282\u4E3A\u5355\u4F4D\uFF09\uFF0C \u6709\u52A9\u4E8E\u63D0\u5347\u6D88\u606F\u5904\u7406\u6548\u7387
#spring.kafka.producer.batch-size=16384
# \u751F\u4EA7\u8005\u53EF\u7528\u4E8E\u7F13\u51B2\u7B49\u5F85\u53D1\u9001\u5230\u670D\u52A1\u5668\u7684\u8BB0\u5F55\u7684\u5185\u5B58\u603B\u5B57\u8282\u6570\uFF0C\u9ED8\u8BA4\u503C\u4E3A 33554432
#spring.kafka.producer.buffer-memory=33554432
# \u751F\u4EA7\u8005\u63A5\u6536\u5230\u670D\u52A1\u5668\u7684\u786E\u8BA4\u6570\uFF0C\u6839\u636E\u6B64\u503C\u5224\u65AD\u6D88\u606F\u662F\u5426\u88AB\u670D\u52A1\u5668\u5B8C\u5168\u63A5\u6536\uFF0C\u53EF\u9009\u503C\u6709\uFF1A0\u3001all\u3001-1\u3001 1
# 0\uFF1A\u751F\u4EA7\u8005\u4E0D\u4F1A\u7B49\u5F85\u6765\u81EA\u670D\u52A1\u5668\u7684\u4EFB\u4F55\u786E\u8BA4\uFF0C\u5C31\u89C6\u6D88\u606F\u5DF2\u53D1\u9001\u6210\u529F\uFF0C\u5E76\u4E14\u91CD\u8BD5\u914D\u7F6E\u5C06\u4E0D\u4F1A\u751F\u6548\uFF0C\u8FD9\u79CD\u65B9\u6848\u6709\u6700\u9AD8\u7684\u541E\u5410\u7387
# all/-1\uFF1A\u751F\u4EA7\u8005\u5728\u670D\u52A1\u5668\u5C06\u6D88\u606F\u540C\u6B65\u5230\u6240\u6709\u526F\u672C\u540E\u624D\u4F1A\u6536\u5230\u786E\u8BA4\uFF0C\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u6D88\u606F\u57FA\u672C\u5168\u90E8\u88AB\u670D\u52A1\u5668\u63A5\u6536\uFF0C\u6D88\u606F\u6301\u4E45\u6027\u5F97\u5230\u4E86\u4FDD\u8BC1
# 1\uFF1A\u751F\u4EA7\u8005\u5728\u670D\u52A1\u5668\u63A5\u6536\u5230\u6D88\u606F\u540E\u624D\u6536\u5230\u786E\u8BA4\uFF0C\u541E\u5410\u7387\u548C\u6D88\u606F\u6301\u4E45\u6027\u6BD4\u8F83\u5747\u8861
spring.kafka.producer.acks=1
# \u6D88\u606F\u7684\u5E8F\u5217\u5316\u65B9\u5F0F
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# \u6D88\u8D39\u8005\u6240\u5C5E\u7684\u6D88\u8D39\u8005\u7EC4\u7684\u552F\u4E00\u6807\u8BC6
spring.kafka.consumer.group-id=kafka_group_test
# \u5F53\u6D88\u8D39\u8005\u6D88\u8D39\u7684\u6D88\u606F\u6CA1\u6709\u504F\u79FB\u91CF\u65F6\u5982\u4F55\u91CD\u7F6E\u504F\u79FB\u91CF\uFF0C\u9ED8\u8BA4\u503C\u4E3A latest\uFF0C\u8868\u793A\u81EA\u52A8\u5C06\u504F\u79FB\u91CD\u7F6E\u4E3A\u6700\u65B0\u7684\u504F\u79FB\u91CF
# \u53EF\u9009\u503C\u6709\uFF1Aearliest\u3001latest\u3001none
#spring.kafka.consumer.auto-offset-reset=latest
# \u6D88\u8D39\u7684\u6D88\u606F\u7684\u504F\u79FB\u91CF\u662F\u5426\u81EA\u52A8\u63D0\u4EA4\u7ED9 Kafka\uFF0C\u9ED8\u8BA4\u503C\u4E3A true
#spring.kafka.consumer.enable-auto-commit=true
# \u6D88\u8D39\u7684\u6D88\u606F\u7684\u504F\u79FB\u81EA\u52A8\u63D0\u4EA4\u7ED9 Kafka \u7684\u9891\u7387\uFF08\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D\uFF09\uFF0C\u9ED8\u8BA4\u503C\u4E3A 5000
#spring.kafka.consumer.auto-commit-interval=5000
# \u6D88\u606F\u7684\u53CD\u5E8F\u5217\u5316\u65B9\u5F0F
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# freemarker
#spring.freemarker.template-loader-path=classpath:/templates/freemarker/
# thymeleaf
spring.thymeleaf.prefix=classpath:/templates/thymeleaf/

beetl.enable=false
enjoy.enable=false

# beetl
beetl.templates-path=/templates/beetl/
beetl.suffix=.btl
beetl.dev=true
# enjoy
enjoy.base-template-path=/templates/enjoy/
enjoy.suffix=.html
enjoy.content-type=text/html

#spring.cache.type=redis
#spring.cache.type=ehcache
#spring.cache.ehcache.config=classpath:ehcache.xml

# mqtt
mqtt.enable=false
mqtt.server_uri=tcp://127.0.0.1:1883
#mqtt.server_uri=ws://127.0.0.1:8083
#mqtt.server_uri=wss://www.test.com:8084
mqtt.user_name=admin
mqtt.password=public
mqtt.topic_filter=default_topic/#

# zookeeper
zookeeper.enable=false
zookeeper.connect-string=localhost:2181,localhost:2182,localhost:2183

# swagger
swagger.enable=true
#spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

# shiro
shiro.enable=false
shiro.login.unknown_account=false
shiro.login.incorrect_credentials=false
shiro.login.locked_account=false

#cat
cat.enable = false
